#!/usr/bin/env sh
#
# Automatically open up an ssh tunnel and configure OS X to use the
# connection as a SOCKS server.

# ======================================================================
# CONFIGURATION
# ======================================================================

remoteuser="ssh_user_here"
remoteproxy="ip_or_hostname_here"
remoteport="22"

# ======================================================================
# END CONFIGURATION
# ======================================================================

if [ -z "$1" ]; then
  currentProxyState=`networksetup -getsocksfirewallproxy Wi-Fi \
    | head -n 1 \
    | cut -d " " -f 2`

  if [ "$currentProxyState" == "Yes" ]; then
    echo "The proxy is ON"
  else
    echo "The proxy is OFF"
  fi

elif [ $1 == "on" ]; then
  # Check for an existing tunnel to the server.
  processline=`ps -A \
    | grep "ssh -f" \
    | grep "$remoteuser" \
    | grep "sleep"`

  # If a tunnel exists get the port number or create a new tunnel.
  if [ $? == 0 ]; then
    localport=`echo "$processline" | sed "s/.*-D \([0-9]*\).*/\1/"`
  else
    # Get the min and max system-available ports.
    lowerport=`sysctl net.inet.ip.portrange.first | cut -d " " -f 2`
    upperport=`sysctl net.inet.ip.portrange.last | cut -d " " -f 2`

    # Start checking ports to find a free one.
    while :; do
      for (( localport = lowerport ; localport <= upperport ; localport++ )); do
        nc -z localhost "$localport" >/dev/null || break 2
      done
    done

    echo "Starting SSH session. Will run in background for 1 day."
    ssh -f -q -p $remoteport -D $localport $remoteuser@$remoteproxy sleep 1d
  fi

  echo "Listening on localhost:$localport. Modifying network settings..."
  sudo networksetup -setsocksfirewallproxy Wi-Fi 127.0.0.1 $localport off
  echo "Done!"

elif [ $1 == "off" ]; then
  echo "Disabling proxy in network settings."
  sudo networksetup -setsocksfirewallproxystate Wi-Fi off
  echo "Done!"

elif [ $1 == "killall" ]; then
  pids=`ps -A | grep "ssh -f" | grep "$remoteuser" | grep "sleep" | awk '{print $1}'`
  echo "Killing all running proxy connections."
  for pid in $pids; do
    kill -9 $pid
  done
  echo "Done!"
fi
